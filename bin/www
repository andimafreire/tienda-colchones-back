#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('tienda-colchones-backend:server');
const http = require('http');
const config = require('../config');
const {MongoClient} = require('mongodb');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

/**
 * Initialize mongo collections
 */

async function initMongoCollections(){
  const uri = `mongodb+srv://${config.mongoUser}:${config.mongoPass}@${config.mongoClusterURL}/shop?retryWrites=true&w=majority&useUnifiedTopology=true`;
  const client = new MongoClient(uri);

  try {
    // Connect to the MongoDB cluster
    await client.connect();

    // Get all collections of DB
    const db = client.db(config.mongoDBName);
    const collections = await db.listCollections({}, {nameOnly: true}).toArray();
    
    // Insert data to missing collections
    for (let name of config.mongoDBCollections) {

      if (collections.filter(collect => collect.name == name).length == 0) {
        let data = require(`../data/${name}.js`);
        
        if (data.length > 0) await db.collection(name).insertMany(data);
      }
    }

  } catch (e) {
    console.error(e);
  } finally {
    await client.close();
  }
}

initMongoCollections().catch(console.error);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
